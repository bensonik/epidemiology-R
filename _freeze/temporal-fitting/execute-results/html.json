{
  "hash": "ad6e144e022e56644cc55140cfacb20e",
  "result": {
    "markdown": "---\ntitle: \"Model fitting\"\n---\n\n\nIn model fitting for epidemiology, the objective is to determine which previously-reviewed epidemiological models best fit the data from actual epidemics. Doing so allows us to obtain two key parameters: the initial inoculum and the apparent infection rate.\n\nThere are essentially two methods for achieving this: linear regression and non-linear regression modeling. We'll begin with linear regression, which is computationally simpler. I'll illustrate the procedure using both built-in R functions and custom functions from the epifitter package [@alves2021a]. Epifitter offers a set of user-friendly functions that can fit and rank the best models for a given epidemic.\n\nTo exemplify, we'll continue examining a previously shown curve that represents the incidence of the tobacco etch virus, a disease affecting peppers, over time. This dataset is featured in Chapter 3 of the book, \"Study of Plant Disease Epidemics\" [@chapter2017b]. While the book presents SAS code for certain analyses, we offer an alternative code that accomplishes similar analyses, even if it doesn't replicate the book's results exactly.\n\n## Linear regression: single epidemics\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-1_996227a41c60f5eaab08567668a93166'}\n\n```{.r .cell-code}\ndpc <- \n  tribble(\n   ~t,  ~y, \n   0,  0.1, \n   7,  1, \n  14,  9, \n  21,  25, \n  28,  80, \n  35, 98, \n  42, 99, \n  49, 99.9\n  )\n```\n:::\n\n\nTo start, we'll need to transform the disease intensity (in proportion scale) data according to each of the models we aim to fit. In this instance, we'll look at the four models discussed in the previous chapter: exponential, monomolecular, logistic, and Gompertz. We can use the `mutate()` function of *dplyr* package.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-2_adaf460558e73731eb376466c8f8143e'}\n\n```{.r .cell-code}\ndpc1 <- dpc |> \n  mutate(y = y/100) |> # transform to proportion\n  mutate(exponential = log(y),\n         monomolecular = log(1 / (1 - y)),\n         logistic = log(y / (1 - y)),\n         gompertz = -log(-log(y)))\ndpc1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n      t     y exponential monomolecular logistic gompertz\n  <dbl> <dbl>       <dbl>         <dbl>    <dbl>    <dbl>\n1     0 0.001    -6.91          0.00100    -6.91   -1.93 \n2     7 0.01     -4.61          0.0101     -4.60   -1.53 \n3    14 0.09     -2.41          0.0943     -2.31   -0.879\n4    21 0.25     -1.39          0.288      -1.10   -0.327\n5    28 0.8      -0.223         1.61        1.39    1.50 \n6    35 0.98     -0.0202        3.91        3.89    3.90 \n7    42 0.99     -0.0101        4.61        4.60    4.60 \n8    49 0.999    -0.00100       6.91        6.91    6.91 \n```\n:::\n:::\n\n\nNow we can plot the curves using the transformed values regressed against time. The curve that appears most linear, closely coinciding with the regression fit line, is a strong candidate for the best-fitting model. To accomplish this, we'll first reshape the dataframe into long format, and then generate plots for each of the four models.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-3_fef2d734eb8bc64a96c522ea567eafe4'}\n\n```{.r .cell-code}\ndpc2 <- dpc1 |> \n  pivot_longer(3:6, names_to = \"model\", values_to = \"y2\") \n\n\ndpc2 |> \n  ggplot(aes(t, y2, color = model))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)+\n  facet_wrap(~ model)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nFor this particular curve, it's readily apparent that the logistic model offers the best fit to the data, as evidenced by the data points being closely aligned with the regression line, compared to the other models. However, to make a more nuanced decision between the logistic and Gompertz models---which are both typically used for sigmoid curves---we can rely on additional statistical measures.\n\nSpecifically, we can fit a regression model for each and examine key metrics such as the R-squared value and the residual standard error. To further validate the model's accuracy, we can use Lin's Concordance Correlation Coefficient to assess how closely the model's predictions match the actual (transformed) data points.\n\nFor this exercise, let's focus on the logistic and Gompertz models. We'll start by fitting the logistic model and then move on to analyzing the summary of the regression model.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-4_259952a34e7bce0eeba5aa5d93ea85d3'}\n\n```{.r .cell-code}\nlogistic <- dpc2 |> \n  filter(model == \"logistic\")\n\nm_logistic <- lm(y2 ~ t, data = logistic)\n\n\n# R-squared\nsummary(m_logistic)$r.squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9923659\n```\n:::\n\n```{.r .cell-code}\n# RSE \nsummary(m_logistic)$sigma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4523616\n```\n:::\n\n```{.r .cell-code}\n# calculate the Lin's CCC\nlibrary(epiR)\nccc_logistic <- epi.ccc(logistic$y2, predict(m_logistic))\nccc_logistic$rho.c[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        est\n1 0.9961683\n```\n:::\n:::\n\n\nWe repeat the procedure for the Gompertz model.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-5_ac53a45a118e85a6321664058f946b6b'}\n\n```{.r .cell-code}\ngompertz <- dpc2 |> \n  filter(model == \"gompertz\")\n\nm_gompertz <- lm(y2 ~ t, data = gompertz)\n\n\n# R-squared\nsummary(m_gompertz)$r.squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9431066\n```\n:::\n\n```{.r .cell-code}\n# RSE \nsummary(m_gompertz)$sigma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8407922\n```\n:::\n\n```{.r .cell-code}\n# calculate the Lin's CCC\nlibrary(epiR)\nccc_gompertz <- epi.ccc(gompertz$y2, predict(m_gompertz))\nccc_gompertz$rho.c[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        est\n1 0.9707204\n```\n:::\n:::\n\n\nNext, let's extract the two parameters of interest from each fitted model and incorporate them into the integral form of the respective models. To do this, we'll need to back-transform the intercept, which represents the initial inoculum. This can be accomplished using specific equations, which we'll outline next.\n\n| Model         | transformation   | Backtranformation |\n|---------------|------------------|-------------------|\n| Exponential   | log(y)           | exp(y)            |\n| Monomolecular | log(1 / (1 - y)) | 1 - exp(-y)       |\n| Logistic      | log(y / (1 - y)) | 1 / (1 + exp(-y)) |\n| Gompertz      | -log(-log(y))    | exp(-exp(-y))     |\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-6_9b8f031e3101c6242d1293678fd9aa96'}\n\n```{.r .cell-code}\nrL <- m_logistic$coefficients[2]\nrL\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        t \n0.2784814 \n```\n:::\n\n```{.r .cell-code}\ny02 <- m_logistic$coefficients[1]\ny0L = 1 / (1 + exp(-y02))\ny0L\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept) \n0.001372758 \n```\n:::\n:::\n\n\nNow the plot:\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-7_5c22e8ac1c67211680449696a0f402ad'}\n\n```{.r .cell-code}\nlogistic |>\n  ggplot(aes(t, y)) +\n  geom_point()+\n  stat_function(\n    linetype = 2,\n    fun = function(t) 1 / (1 + ((1 - y0L) / y0L) * exp(-rL * t)))\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nIn this case, it's clear that the logistic model emerges as the best fit based on our statistical evaluation. The approach for model selection outlined here is straightforward and manageable when dealing with a single epidemic and comparing only two models. However, real-world scenarios often require analyzing multiple curves and fitting various models to each, making manual comparison impractical for selecting a single best-fitting model. To streamline this task, it's advisable to automate the process using custom functions designed to simplify the coding work involved.\n\nThat's where the epifitter package comes into play! This package offers a range of custom functions designed to automate the model fitting and selection process, making it much more efficient to analyze multiple curves across different epidemics. By using epifitter, one can expedite the statistical evaluation needed to identify the best-fitting models.\n\n## epifitter - multiple epidemics\n\nWe will now examine three Disease Progress Curves (DPCs) representing the incidence of the tobacco etch virus, a disease affecting peppers. Incidence evaluations were conducted at 7-day intervals up to 49 days. The relevant data can be found in Chapter 4, page 93, of the book \"Study of Plant Disease Epidemics\" [@chapter2017b]. To get started, let's input the data manually and create a data frame. The first column will represent the assessment time, while the remaining columns will correspond to the treatments, referred to as 'groups' in the book, ranging from 1 to 3.\n\n## Entering data\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-8_c587bc828226e81f5ea9de4345e4663c'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # essential packages \ntheme_set(theme_bw(base_size = 16)) # set global theme\n```\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-9_6eb13b82d0262e58c3db6545356fa37f'}\n\n```{.r .cell-code}\npepper <- \n  tribble(\n   ~t,  ~`1`,  ~`2`,  ~`3`,\n   0,  0.08, 0.001, 0.001,\n   7,  0.13,  0.01, 0.001,\n  14,  0.78,  0.09,  0.01,\n  21,  0.92,  0.25,  0.05,\n  28,  0.99,   0.8,  0.18,\n  35, 0.995,  0.98,  0.34,\n  42, 0.999,  0.99,  0.48,\n  49, 0.999, 0.999,  0.74\n  ) \n```\n:::\n\n\n## Visualize the DPCs\n\nBefore proceeding with model selection and fitting, let's visualize the three epidemics. The code below reproduces quite exactly the top plot of Fig. 4.15 (@chapter2017b page 94). The appraisal of the curves might give us a hint on which models are the best candidates.\n\nBecause the data was entered in the wide format (each DPC is in a different column) we need to reshape it to the long format. The `pivot_longer()` function will do the job of reshaping from wide to long format so we can finally use the `ggplot()` function to produce the plot.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-dpcs_f4797c09ca825dee30885a8c028e113f'}\n\n```{.r .cell-code}\npepper |> \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\") |> \n  ggplot (aes(t, inc, \n              linetype = treat, \n              shape = treat, \n              group = treat))+\n  geom_line(size = 1)+\n  geom_point(size =3, shape = 16)+\n  annotate(geom = \"text\", x = 15, y = 0.84, label = \"1\")+\n  annotate(geom = \"text\", x = 23, y = 0.6, label = \"2\")+\n  annotate(geom = \"text\", x = 32, y = 0.33, label = \"3\")+\n  labs(y = \"Disease incidence (y)\",\n       x = \"Time (days)\")+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![Disease progress curves for three tobacco etch epidemics in pepper. Reproduced from @chapter2017b page 94](temporal-fitting_files/figure-html/fig-dpcs-1.png){#fig-dpcs width=672}\n:::\n:::\n\n\nMost of the three curves show a sigmoid shape with the exception of group 3 that resembles an exponential growth, not reaching the maximum value, and thus suggesting an incomplete epidemic. We can easily eliminate the monomolecular and exponential models and decide on the other two non-flexible models: logistic or Gompertz. To do that, let's proceed to model fitting and evaluate the statistics for supporting a final decision. There are two modeling approaches for model fitting in epifitter: the **linear** or **nonlinear** parameter-estimation methods.\n\n### epifitter: linear regression\n\nAmong the several options offered by *epifitter* we start with the simplest one, which is to fit a model to a single epidemics using the linear regression approach. For such, the `fit_lin()` requires two arguments: time (`time`) and disease intensity (`y`) each one as a vector stored or not in a dataframe.\n\nSince we have three epidemics, `fit_lin()` will be use three times. The function produces a list object with six elements. Let's first look at the `Stats` dataframe of each of the three lists named `epi1` to `epi3`.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-11_4fcd58a6b8595a658da1eb02643f7133'}\n\n```{.r .cell-code}\nlibrary(epifitter)\nepi1 <- fit_lin(time = pepper$t,  \n                y = pepper$`1` )\nepi1$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nGompertz      0.9848    0.9700 0.5911\nMonomolecular 0.9838    0.9681 0.5432\nLogistic      0.9782    0.9572 0.8236\nExponential   0.7839    0.6447 0.6705\n```\n:::\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-12_6c6f19d1271ef1cd065baf3b8cce1500'}\n\n```{.r .cell-code}\nepi2 <- fit_lin(time = pepper$t,  \n  y = pepper$`2` )\nepi2$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nLogistic      0.9962    0.9924 0.4524\nGompertz      0.9707    0.9431 0.8408\nMonomolecular 0.9248    0.8601 1.0684\nExponential   0.8971    0.8134 1.2016\n```\n:::\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-13_a0a50b0de1280cec969bc8bba5154a59'}\n\n```{.r .cell-code}\nepi3 <- fit_lin(time = pepper$t,  \n  y = pepper$`3` )\nepi3$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nLogistic      0.9829    0.9665 0.6045\nGompertz      0.9825    0.9656 0.2263\nExponential   0.9636    0.9297 0.7706\nMonomolecular 0.8592    0.7531 0.2534\n```\n:::\n:::\n\n\nThe statistics of the model fit confirms our initial guess that the predictions by the logistic or the Gompertz are closer to the observations than predictions by the other models. There is a slight between them based on these statistics. However, to pick one of the models, it is important to inspect the curves with the observed and predicted values to check which model is best for all curves. For such, we can use the `plot_fit()` function from *epifitter* to explore visually the fit of the four models to each curve.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-14_6b14a76f8fad7214debd6c5dfe0ca9b0'}\n\n```{.r .cell-code}\nplot_fit(epi1)+\n  ylim(0,1)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nepi1$stats_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 14\n  best_mo…¹ model      r   r_se r_ci_…² r_ci_…³     v0 v0_se r_squ…⁴   RSE   CCC\n      <int> <chr>  <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl>   <dbl> <dbl> <dbl>\n1         1 Gomp… 0.182  0.0130  0.150   0.213  -1.21  0.382   0.970 0.591 0.985\n2         2 Mono… 0.162  0.0120  0.132   0.191  -0.463 0.351   0.968 0.543 0.984\n3         3 Logi… 0.210  0.0182  0.166   0.255  -2.27  0.532   0.957 0.824 0.978\n4         4 Expo… 0.0488 0.0148  0.0126  0.0849 -1.81  0.433   0.645 0.671 0.784\n# … with 3 more variables: y0 <dbl>, y0_ci_lwr <dbl>, y0_ci_upr <dbl>, and\n#   abbreviated variable names ¹​best_model, ²​r_ci_lwr, ³​r_ci_upr, ⁴​r_squared\n```\n:::\n\n```{.r .cell-code}\nplot_fit(epi2)+\n  ylim(0,1)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\nepi2$stats_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 14\n  best_model model     r    r_se r_ci_…¹ r_ci_…²    v0 v0_se r_squ…³   RSE   CCC\n       <int> <chr> <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>   <dbl> <dbl> <dbl>\n1          1 Logi… 0.278 0.00997  0.254    0.303 -6.59 0.292   0.992 0.452 0.996\n2          2 Gomp… 0.185 0.0185   0.139    0.230 -3.00 0.543   0.943 0.841 0.971\n3          3 Mono… 0.143 0.0236   0.0854   0.201 -1.33 0.690   0.860 1.07  0.925\n4          4 Expo… 0.135 0.0265   0.0706   0.200 -5.26 0.776   0.813 1.20  0.897\n# … with 3 more variables: y0 <dbl>, y0_ci_lwr <dbl>, y0_ci_upr <dbl>, and\n#   abbreviated variable names ¹​r_ci_lwr, ²​r_ci_upr, ³​r_squared\n```\n:::\n\n```{.r .cell-code}\nplot_fit(epi3)+\n  ylim(0,1)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n\n```{.r .cell-code}\nepi3$stats_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 14\n  best_m…¹ model      r    r_se r_ci_…² r_ci_…³     v0 v0_se r_squ…⁴   RSE   CCC\n     <int> <chr>  <dbl>   <dbl>   <dbl>   <dbl>  <dbl> <dbl>   <dbl> <dbl> <dbl>\n1        1 Logi… 0.175  0.0133   0.143   0.208  -7.11  0.390   0.966 0.605 0.983\n2        2 Gomp… 0.0647 0.00499  0.0525  0.0769 -2.28  0.146   0.966 0.226 0.982\n3        3 Expo… 0.151  0.0170   0.110   0.193  -6.86  0.497   0.930 0.771 0.964\n4        4 Mono… 0.0239 0.00559  0.0102  0.0376 -0.251 0.164   0.753 0.253 0.859\n# … with 3 more variables: y0 <dbl>, y0_ci_lwr <dbl>, y0_ci_upr <dbl>, and\n#   abbreviated variable names ¹​best_model, ²​r_ci_lwr, ³​r_ci_upr, ⁴​r_squared\n```\n:::\n:::\n\n\n### epifitter: non linear regression\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-15_ec0fd6d7fe275be248bede850b52d2ff'}\n\n```{.r .cell-code}\nepi11 <- fit_nlin(time = pepper$t,  \n                y = pepper$`1` )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n```\n:::\n\n```{.r .cell-code}\nepi11$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nGompertz      0.9963    0.9956 0.0381\nLogistic      0.9958    0.9939 0.0403\nMonomolecular 0.9337    0.8883 0.1478\nExponential   0.7161    0.5903 0.2770\n```\n:::\n\n```{.r .cell-code}\nepi22 <- fit_nlin(time = pepper$t,  \n                y = pepper$`2` )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in nls.lm(par = start, fn = FCT, jac = jac, control = control, lower = lower, : lmdif: info = -1. Number of iterations has reached `maxiter' == 50.\n```\n:::\n\n```{.r .cell-code}\nepi22$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nLogistic      0.9988    0.9981 0.0246\nGompertz      0.9904    0.9857 0.0683\nMonomolecular 0.8697    0.8020 0.2329\nExponential   0.8587    0.7862 0.2413\n```\n:::\n\n```{.r .cell-code}\nepi33 <- fit_nlin(time = pepper$t,  \n                y = pepper$`3` )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in log(y0/1): NaNs produzidos\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n\nWarning in log(y0/1): NaNs produzidos\n```\n:::\n\n```{.r .cell-code}\nepi33$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nLogistic      0.9957    0.9922 0.0270\nGompertz      0.9946    0.9894 0.0306\nExponential   0.9880    0.9813 0.0445\nMonomolecular 0.8607    0.7699 0.1426\n```\n:::\n:::\n\n\nAnd now we can produce the plot of the fitted curves together with the original incidence dat. The `stats_all` dataframe shows everything we need regarding the statistics and the values of the parameteres.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-16_043858df68d3e25ca8022f2b32ba539c'}\n\n```{.r .cell-code}\nplot_fit(epi11)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nepi11$stats_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          model            y0        y0_se          r        r_se df       CCC\n1      Gompertz  3.637004e-07 1.740278e-06 0.28650362 0.031316004  6 0.9962708\n2      Logistic  9.249547e-03 6.032959e-03 0.41813507 0.053993054  6 0.9957910\n3 Monomolecular -2.647181e-02 1.405690e-01 0.08362059 0.021247304  6 0.9337210\n4   Exponential  4.159606e-01 1.376766e-01 0.02150631 0.008865752  6 0.7160769\n  r_squared        RSE     y0_ci_lwr    y0_ci_upr      r_ci_lwr   r_ci_upr\n1 0.9956357 0.03808713 -3.894606e-06 4.622007e-06  0.2098761152 0.36313112\n2 0.9938810 0.04031787 -5.512571e-03 2.401166e-02  0.2860188269 0.55025131\n3 0.8883222 0.14775965 -3.704319e-01 3.174883e-01  0.0316303061 0.13561087\n4 0.5903409 0.27704205  7.907823e-02 7.528430e-01 -0.0001873996 0.04320003\n  best_model\n1          1\n2          2\n3          3\n4          4\n```\n:::\n\n```{.r .cell-code}\nplot_fit(epi22)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n```{.r .cell-code}\nepi22$stats_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          model            y0        y0_se          r       r_se df       CCC\n1      Logistic  3.435161e-04 2.065093e-04 0.33213410 0.02490143  6 0.9988253\n2      Gompertz  1.542402e-14 3.498464e-13 0.16187411 0.03015246  6 0.9904450\n3 Monomolecular -1.971531e-01 2.005248e-01 0.04420601 0.01316843  6 0.8696734\n4   Exponential  1.612234e-01 8.483982e-02 0.04109365 0.01255214  6 0.8587176\n  r_squared        RSE     y0_ci_lwr    y0_ci_upr   r_ci_lwr   r_ci_upr\n1 0.9980693 0.02463493 -1.617939e-04 8.488261e-04 0.27120250 0.39306570\n2 0.9856896 0.06825059 -8.406192e-13 8.714672e-13 0.08809370 0.23565453\n3 0.8020353 0.23288138 -6.878195e-01 2.935134e-01 0.01198401 0.07642800\n4 0.7862042 0.24125260 -4.637219e-02 3.688189e-01 0.01037967 0.07180762\n  best_model\n1          1\n2          2\n3          3\n4          4\n```\n:::\n\n```{.r .cell-code}\nplot_fit(epi33)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n\n```{.r .cell-code}\nepi33$stats_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          model            y0        y0_se          r        r_se df       CCC\n1      Logistic  5.663360e-03 1.966234e-03 0.12499314 0.008671069  6 0.9957129\n2      Gompertz  2.263877e-07 7.974644e-07 0.07598369 0.006102458  6 0.9945740\n3   Exponential  2.252674e-02 7.218448e-03 0.07188236 0.007047947  6 0.9880169\n4 Monomolecular -1.371485e-01 1.060292e-01 0.01696025 0.004252990  6 0.8606954\n  r_squared        RSE     y0_ci_lwr    y0_ci_upr   r_ci_lwr   r_ci_upr\n1 0.9922359 0.02703107  8.521580e-04 1.047456e-02 0.10377580 0.14621049\n2 0.9894187 0.03058835 -1.724937e-06 2.177713e-06 0.06105152 0.09091587\n3 0.9812854 0.04450573  4.863834e-03 4.018965e-02 0.05463665 0.08912806\n4 0.7698769 0.14260437 -3.965926e-01 1.222956e-01 0.00655356 0.02736694\n  best_model\n1          1\n2          2\n3          3\n4          4\n```\n:::\n:::\n\n\nFor multiple epidemics, we can use another handy function that allows us to simultaneously fit the models to multiple DPC data. Different from `fit_lin()`, `fit_multi()` requires the data to be structured in the long format where there is a column specifying each of the epidemics.\n\nLet's then create a new data set called `pepper2` using the data transposing functions of the *tidyr* package.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-17_e403bf7ead6c78789b62d506aa34af77'}\n\n```{.r .cell-code}\npepper2 <- pepper |> \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\")\n```\n:::\n\n\nNow we fit the models to all DPCs. Note that the name of the variable indicating the DPC code needs to be informed in `strata_cols` argument. To use the nonlinear regression approach we set `nlin` argument to `TRUE`.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-18_c05035646cae527a967a038b6f194630'}\n\n```{.r .cell-code}\nepi_all <- fit_multi(\n  time_col = \"t\",\n  intensity_col = \"inc\",\n  data = pepper2,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n```\n:::\n\n\nNow let's select the statistics of model fitting. Again, *Epifitter* ranks the models based on the CCC (the higher the better) but it is important to check the RSE as well - the lower the better. In fact, the RSE is more important when the goal is prediction.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-19_78c41b8f7b67b2746544d7941d34968c'}\n\n```{.r .cell-code}\nepi_all$Parameters |> \n  select(treat, model, best_model, RSE, CCC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   treat         model best_model       RSE       CCC\n1      1      Gompertz          1 0.5911056 0.9847857\n2      1 Monomolecular          2 0.5431977 0.9838044\n3      1      Logistic          3 0.8235798 0.9781534\n4      1   Exponential          4 0.6705085 0.7839381\n5      2      Logistic          1 0.4523616 0.9961683\n6      2      Gompertz          2 0.8407922 0.9707204\n7      2 Monomolecular          3 1.0683633 0.9247793\n8      2   Exponential          4 1.2015809 0.8971003\n9      3      Logistic          1 0.6045243 0.9829434\n10     3      Gompertz          2 0.2262550 0.9824935\n11     3   Exponential          3 0.7705736 0.9635747\n12     3 Monomolecular          4 0.2533763 0.8591837\n```\n:::\n:::\n\n\nThe code below calculates the frequency that each model was the best. This would facilitate in the case of many epidemics to analyse.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-20_edb83375c99762a928645147e5737782'}\n\n```{.r .cell-code}\nfreq_best <- epi_all$Parameters %>% \n    filter(best_model == 1) %>% \n    group_by(treat, model) %>% \n    summarise(first = n()) %>%\n  ungroup() |> \n  count(model) \nfreq_best \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  model        n\n  <chr>    <int>\n1 Gompertz     1\n2 Logistic     2\n```\n:::\n:::\n\n\nWe can see that the Logistic model was the best model in two out of three epidemics.\n\nTo be more certain about our decision, let's advance to the final step which is to produce the plots with the observed and predicted values for each assessment time by calling the `Data` dataframe of the \\``epi_all` list.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-fitted_c32cccde66a4a2d9b7129ba9c78e3221'}\n\n```{.r .cell-code}\nepi_all$Data |>\n filter(model %in% c(\"Gompertz\", \"Logistic\")) |> \n  ggplot(aes(time, predicted, shape = treat)) +\n  geom_point(aes(time, y)) +\n  geom_line() +\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(0, 1)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n```\n\n::: {.cell-output-display}\n![Observed (dots) and fitted (line) values for three tobacco etch epidemics in pepper](temporal-fitting_files/figure-html/fig-fitted-1.png){#fig-fitted width=672}\n:::\n:::\n\n\nOverall, the logistic model seems a better fit for all the curves. Let's produce a plot with the prediction error versus time.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-error_1b6f2e39c93917ff9a19893b2bfcdbfd'}\n\n```{.r .cell-code}\nepi_all$Data |>\n filter(model %in% c(\"Gompertz\", \"Logistic\")) |> \n  ggplot(aes(time, predicted -y, shape = treat)) +\n  geom_point() +\n  geom_line() +\n  geom_hline(yintercept = 0, linetype =2)+\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(-0.4, 0.4)) + # set the max to 0.6\n  labs(\n    y = \"Prediction error\",\n    x = \"Time (days after emergence)\",\n    shape = \"Epidemic\"\n  )\n```\n\n::: {.cell-output-display}\n![Prediction error (dotted lines) by two models fitted to the progress curves of three tobacco etch epidemics in pepper](temporal-fitting_files/figure-html/fig-error-1.png){#fig-error width=672}\n:::\n:::\n\n\nThe plots above confirms the logistic model as good fit overall because the errors for all epidemics combined are more scattered around the non-error line.\n\nWe can then now extract the parameters of interest of the chosen model. These data are stored in the `Parameters` data frame of the `epi_all` list. Let's filter the Logistic model and apply a selection of the parameters of interest.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-23_b75f1556f1e3b2a71139842593c80f24'}\n\n```{.r .cell-code}\n  epi_all$Parameters |>\n    filter(model == \"Logistic\") |>\n    select(treat, y0, y0_ci_lwr, y0_ci_upr, r, r_ci_lwr, r_ci_upr \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  treat           y0    y0_ci_lwr   y0_ci_upr         r  r_ci_lwr  r_ci_upr\n1     1 0.0935037690 0.0273207272 0.274728744 0.2104047 0.1659824 0.2548270\n2     2 0.0013727579 0.0006723537 0.002800742 0.2784814 0.2540818 0.3028809\n3     3 0.0008132926 0.0003131745 0.002110379 0.1752146 0.1426077 0.2078215\n```\n:::\n:::\n\n\nWe can produce a plot for visual inference on the differences in the parameters.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-params_3d24a0d7f1b9e25af81972982ac66061'}\n\n```{.r .cell-code}\np1 <- epi_all$Parameters |>\n  filter(model == \"Logistic\") |>\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"r\"\n  )\n\np2 <- epi_all$Parameters |>\n  filter(model == \"Logistic\") |>\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"y0\"\n  )\n\nlibrary(patchwork)\np1 | p2\n```\n\n::: {.cell-output-display}\n![Estimated infection rates (left) and initial inoculum (right) by a logistic model fitted to the progress curves of three epidemics of tobacco etch on pepper](temporal-fitting_files/figure-html/fig-params-1.png){#fig-params width=672}\n:::\n:::\n\n\nWe can compare the rate parameter (slopes) from two separate linear regression models using a t-test. This is sometimes referred to as a \"test of parallelism\" in the context of comparing slopes. The t-statistic for comparing two slopes with their respective standard errors can be calculated as:\n\n$t = \\frac{\\beta_1 - \\beta_2}{\\sqrt{SE_{\\beta_1}^2 + SE_{\\beta_2}^2}}$\n\nThis t-statistic follows a t-distribution with ( df = n_1 + n_2 - 4 ) degrees of freedom, where ( n_1 ) and ( n_2 ) are the sample sizes of the two groups. In our case, ( n_1 = n_2 = 8 ), so ( df = 8 + 8 - 4 = 12 ).\n\nHere's how to perform the t-test for comparing curve 1 and 2.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-25_fc56e58df4c51c815be633a06cfaf48a'}\n\n```{.r .cell-code}\n# Given slopes and standard errors from curve 1 and 2\nbeta1 <- 0.2104\t\nbeta2 <- 0.2784\t\nSE_beta1 <- 0.01815 \nSE_beta2 <- 0.00997\n\n# Sample sizes for both treatments (n1 and n2)\nn1 <- 8\nn2 <- 8\n\n# Calculate the t-statistic\nt_statistic <- abs(beta1 - beta2) / sqrt(SE_beta1^2 + SE_beta2^2)\n\n# Degrees of freedom\ndf <- n1 + n2 - 4\n\n# Calculate the p-value\np_value <- 2 * (1 - pt(abs(t_statistic), df))\n\n# Print the results\nprint(paste(\"t-statistic:\", round(t_statistic, 4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"t-statistic: 3.2837\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Degrees of freedom:\", df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Degrees of freedom: 12\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"p-value:\", round(p_value, 4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"p-value: 0.0065\"\n```\n:::\n:::\n\n\nThe `pt()` function in R gives the cumulative distribution function of the t-distribution. The `2 * (1 - pt(abs(t_statistic), df))` line calculates the two-tailed p-value. This will tell us if the slopes are significantly different at your chosen alpha level (commonly 0.05).\n\n## Designed experiments\n\nIn the following section, we'll focus on disease data collected over time from the same plot unit, also known as repeated measures. This data comes from a designed experiment aimed at evaluating and comparing the effects of different treatments.\n\nSpecifically, we'll use a dataset of progress curves found on page 98 of \"Study of Plant Disease Epidemics\" [@chapter2017b]. These curves depict the incidence of soybean plants showing symptoms of bud blight, which is caused by the tobacco streak virus. Four different treatments, corresponding to different planting dates, were evaluated using a randomized complete block design with four replicates. Each curve has four time-based assessments.\n\nThe data for this study is stored in a CSV file, which we'll load into our environment using the read_csv() function. Once loaded, we'll store the data in a dataframe named budblight.\n\n### Loading data\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-26_afe07ab565fc00d253cb7b7f7c7a100c'}\n\n```{.r .cell-code}\nbudblight <- read_csv(\"https://raw.githubusercontent.com/emdelponte/epidemiology-R/main/data/bud-blight-soybean.csv\")\n```\n:::\n\n\nLet's have a look at the first six rows of the dataset and check the data type for each column. There is an additional column representing the replicates, called block.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-27_24796f575658ae18f8f2bd1a79d7cc86'}\n\n```{.r .cell-code}\nbudblight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 64 × 4\n   treat  time block     y\n   <chr> <dbl> <dbl> <dbl>\n 1 PD1      30     1  0.1 \n 2 PD1      30     2  0.3 \n 3 PD1      30     3  0.1 \n 4 PD1      30     4  0.1 \n 5 PD1      40     1  0.3 \n 6 PD1      40     2  0.38\n 7 PD1      40     3  0.36\n 8 PD1      40     4  0.37\n 9 PD1      50     1  0.57\n10 PD1      50     2  0.52\n# … with 54 more rows\n```\n:::\n:::\n\n\n### Visualizing the DPCs\n\nLet's have a look at the curves and produce a combo plot figure similar to Fig. 4.17 of the book, but without the line of the predicted values.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud1_1a17259c2e2b5264c56927feb57d8ab5'}\n\n```{.r .cell-code}\np3 <- budblight |>\n  ggplot(aes(\n    time, y,\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 1.5) +\n  ylim(0, 0.6) +\n  theme(legend.position = \"none\")+\n  facet_wrap(~treat, ncol =1)+\n  labs(y = \"Disease incidence\",\n       x = \"Time (days after emergence)\")\n\np4 <- budblight |>\n  ggplot(aes(\n    time, log(1 / (1 - y)),\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 2) +\n  facet_wrap(~treat, ncol = 1) +\n  theme(legend.position = \"none\")+\n  labs(y = \"Transformed incidence\", x = \"Time (days after emergence)\")\n\np3 | p4\n```\n\n::: {.cell-output-display}\n![Disease progress curves for the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud1-1.png){#fig-bud1 width=768}\n:::\n:::\n\n\n### Model fitting\n\nRemember that the first step in model selection is the visual appraisal of the curve data linearized with the model transformation. In the case the curves represent complete epidemics (close to 100%) appraisal of the absolute rate (difference in y between two times) over time is also helpful.\n\nFor the treatments above, it looks like the curves are typical of a monocyclic disease (the case of soybean bud blight), for which the monomolecular is usually a good fit, but other models are also possible as well. For this exercise, we will use both the linear and the nonlinear estimation method.\n\n#### Linear regression\n\nFor convenience, we use the `fit_multi()` to handle multiple epidemics. The function returns a list object where a series of statistics are provided to aid in model selection and parameter estimation. We need to provide the names of columns (arguments): assessment time (`time_col`), disease incidence (`intensity_col`), and treatment (`strata_cols`).\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-29_398d8b3b75ae5b3278466f0f615f2489'}\n\n```{.r .cell-code}\nlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n```\n:::\n\n\nLet's look at how well the four models fitted the data. Epifitter suggests the best fitted model (1 to 4, where 1 is best) for each treatment. Let's have a look at the statistics of model fitting.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-30_c63a74f487fdd42d02f3f0d7e6f45713'}\n\n```{.r .cell-code}\nlin1$Parameters |> \nselect(treat, best_model, model, CCC, RSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   treat best_model         model       CCC        RSE\n1    PD1          1 Monomolecular 0.9348429 0.09805661\n2    PD1          2      Gompertz 0.9040182 0.22226189\n3    PD1          3      Logistic 0.8711178 0.44751963\n4    PD1          4   Exponential 0.8278055 0.36124036\n5    PD2          1 Monomolecular 0.9547434 0.07003116\n6    PD2          2      Gompertz 0.9307192 0.17938711\n7    PD2          3      Logistic 0.9062012 0.38773023\n8    PD2          4   Exponential 0.8796705 0.32676216\n9    PD3          1 Monomolecular 0.9393356 0.06832499\n10   PD3          2      Gompertz 0.9288436 0.17156394\n11   PD3          3      Logistic 0.9085414 0.39051075\n12   PD3          4   Exponential 0.8896173 0.33884790\n13   PD4          1      Gompertz 0.9234736 0.17474422\n14   PD4          2 Monomolecular 0.8945962 0.06486949\n15   PD4          3      Logistic 0.8911344 0.52412586\n16   PD4          4   Exponential 0.8739618 0.49769642\n```\n:::\n:::\n\n\nAnd now we extract values for each parameter estimated from the fit of the monomolecular model.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-31_aca356a9ee933d22717a01e2a03ee750'}\n\n```{.r .cell-code}\nlin1$Parameters |>\nfilter(model == \"Monomolecular\") |>\nselect(treat, y0, r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  treat         y0          r\n1   PD1 -0.5727700 0.02197351\n2   PD2 -0.5220593 0.01902952\n3   PD3 -0.4491365 0.01590586\n4   PD4 -0.3619898 0.01118047\n```\n:::\n:::\n\n\nNow we visualize the fit of the monomolecular model (using `filter` function - see below) to the data together with the observed data and then reproduce the right plots in Fig. 4.17 from the book.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud2_cbc8757a3e4d113f2c5cbabfd054f0af'}\n\n```{.r .cell-code}\nlin1$Data |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(time, predicted)) +\n  geom_point(aes(time, y)) +\n  geom_line(size = 0.5) +\n  facet_wrap(~treat) +\n  coord_cartesian(ylim = c(0, 0.6)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n```\n\n::: {.cell-output-display}\n![Observed (dot) and fitted values by a monomolecular model (line) to the data on the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud2-1.png){#fig-bud2 width=672}\n:::\n:::\n\n\nNow we can plot the means and respective 95% confidence interval of the apparent infection rate ($r$) and initial inoculum ($y_0$) for visual inference.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud3_a2d8e07bc63b56f5ca575bb23074431f'}\n\n```{.r .cell-code}\np5 <- lin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"Infection rate (r)\"\n  )\n\np6 <- lin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"Initial inoculum (y0)\"\n  )\np5 | p6\n```\n\n::: {.cell-output-display}\n![Estimates of the infection rate (left) and initial inoculum (right) from the fit of a monomolecular model  to the data on the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud3-1.png){#fig-bud3 width=672}\n:::\n:::\n\n\n#### Non-linear regression\n\nTo estimate the parameters using the non-linear approach, we repeat the same arguments in the `fit_multi` function, but include an additional argument `nlin` set to `TRUE`.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-34_04d347e6a20d17a83aa3be3143d41e9b'}\n\n```{.r .cell-code}\nnlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = TRUE\n)\n```\n:::\n\n\nLet's check statistics of model fit.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-35_c5e766009433e9b981aa38984ac7f6cb'}\n\n```{.r .cell-code}\nnlin1$Parameters |>\nselect(treat, model, CCC, RSE, best_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   treat         model       CCC        RSE best_model\n1    PD1 Monomolecular 0.9382991 0.06133704          1\n2    PD1      Gompertz 0.9172407 0.06986307          2\n3    PD1      Logistic 0.8957351 0.07700720          3\n4    PD1   Exponential 0.8544194 0.08799512          4\n5    PD2 Monomolecular 0.9667886 0.04209339          1\n6    PD2      Gompertz 0.9348370 0.05726761          2\n7    PD2      Logistic 0.9077857 0.06657793          3\n8    PD2   Exponential 0.8702365 0.07667322          4\n9    PD3 Monomolecular 0.9570853 0.04269129          1\n10   PD3      Gompertz 0.9261609 0.05443852          2\n11   PD3      Logistic 0.8997106 0.06203037          3\n12   PD3   Exponential 0.8703443 0.06891021          4\n13   PD4 Monomolecular 0.9178226 0.04595409          1\n14   PD4      Gompertz 0.9085579 0.04791331          2\n15   PD4      Logistic 0.8940731 0.05083336          3\n16   PD4   Exponential 0.8842437 0.05267415          4\n```\n:::\n:::\n\n\nAnd now we obtain the two parameters of interest. Note that the values are not the sames as those estimated using linear regression, but they are similar and highly correlated.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-36_d6ee889ee135e69f0d2e3258c84731fe'}\n\n```{.r .cell-code}\nnlin1$Parameters |>\nfilter(model == \"Monomolecular\") |>\nselect(treat, y0, r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  treat         y0          r\n1   PD1 -0.7072562 0.02381573\n2   PD2 -0.6335713 0.02064629\n3   PD3 -0.5048763 0.01674209\n4   PD4 -0.3501234 0.01094368\n```\n:::\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud4_f03604323c363e74ababb6529835dd83'}\n\n```{.r .cell-code}\np7 <- nlin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"Infection rate (r)\"\n  )\n\np8 <- nlin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, y0)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"Initial inoculum (y0)\"\n  )\n\np7 | p8\n```\n\n::: {.cell-output-display}\n![Estimates of the infection rate (left) and initial inoculum (right) from the fit of a monomolecular model  to the data on the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud4-1.png){#fig-bud4 width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}