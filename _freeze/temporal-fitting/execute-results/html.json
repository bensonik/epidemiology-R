{
  "hash": "9a671fb60ecc6b56d12d5c1fecfb8c98",
  "result": {
    "markdown": "---\ntitle: \"Model fitting\"\n---\n\n\nNow we will fit the population dynamics models seen in the previous chapters to actual disease progress curves (DPCs) data obtained from the literature using R functions but also using the [*epifitter* package](https://alvesks.github.io/epifitter/) [@alves2021a]. With *epifitter*, a few user friendly functions will help us decide which model to choose to obtain the parameters of interest and further compare the epidemics.\n\nTo illustrate, I will use two datasets available in Chapter 3 from the book, *Study of Plant Disease Epidemics* [@chapter2017b]. In the book, SAS codes are presented to perform a few analysis. We provide an alternative code for performing similar analysis, although not perfectly reproducing the results from the book.\n\n## Non-replicated epidemics\n\nWe will compare three DPCs of the incidence of tobacco etch, a virus disease, in peppers. Evaluations of incidence were evaluated at a 7-day interval up to 49 days. The data are available in chapter 4 (page 93) [@chapter2017b]. Let's input the data manually and create a data frame. First column is the assessment time and the other columns correspond to the treatments, called groups in the book, from 1 to 3.\n\n## Entering data\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-1_fae07568b7d4339547349f5aa391423e'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # essential packages \ntheme_set(theme_bw(base_size = 16)) # set global theme\n```\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-2_b3cddc5b2f6a36817622917a43c2e623'}\n\n```{.r .cell-code}\npepper <- \n  tribble(\n   ~t,  ~`1`,  ~`2`,  ~`3`,\n   0,  0.08, 0.001, 0.001,\n   7,  0.13,  0.01, 0.001,\n  14,  0.78,  0.09,  0.01,\n  21,  0.92,  0.25,  0.05,\n  28,  0.99,   0.8,  0.18,\n  35, 0.995,  0.98,  0.34,\n  42, 0.999,  0.99,  0.48,\n  49, 0.999, 0.999,  0.74\n  ) \n```\n:::\n\n\n## Visualize the DPCs\n\nBefore proceeding with model selection and fitting, let's visualize the three epidemics. The code below reproduces quite exactly the top plot of Fig. 4.15 (@chapter2017b page 94). The appraisal of the curves might give us a hint on which models are the best candidates.\n\nBecause the data was entered in the wide format (each DPC is in a different column) we need to reshape it to the long format. The `pivot_longer()` function will do the job of reshaping from wide to long format so we can finally use the `ggplot()` function to produce the plot.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-dpcs_f4797c09ca825dee30885a8c028e113f'}\n\n```{.r .cell-code}\npepper |> \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\") |> \n  ggplot (aes(t, inc, \n              linetype = treat, \n              shape = treat, \n              group = treat))+\n  geom_line(size = 1)+\n  geom_point(size =3, shape = 16)+\n  annotate(geom = \"text\", x = 15, y = 0.84, label = \"1\")+\n  annotate(geom = \"text\", x = 23, y = 0.6, label = \"2\")+\n  annotate(geom = \"text\", x = 32, y = 0.33, label = \"3\")+\n  labs(y = \"Disease incidence (y)\",\n       x = \"Time (days)\")+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![Disease progress curves for three tobacco etch epidemics in pepper. Reproduced from @chapter2017b page 94](temporal-fitting_files/figure-html/fig-dpcs-1.png){#fig-dpcs width=672}\n:::\n:::\n\n\nMost of the three curves show a sigmoid shape with the exception of group 3 that resembles an exponential growth, not reaching the maximum value, and thus suggesting an incomplete epidemic. We can easily eliminate the monomolecular and exponential models and decide on the other two non-flexible models: logistic or Gompertz. To do that, let's proceed to model fitting and evaluate the statistics for supporting a final decision. There are two modeling approaches for model fitting in epifitter: the **linear** or **nonlinear** parameter-estimation methods.\n\n## Fitting: single epidemics\n\nAmong the several options offered by *epifitter* we start with the simplest one, which is to fit a model to a single epidemics using the linear regression approach. For such, the `fit_lin()` requires two arguments: time (`time`) and disease intensity (`y`) each one as a vector stored or not in a dataframe.\n\nSince we have three epidemics, `fit_lin()` will be use three times. The function produces a list object with six elements. Let's first look at the `Stats` dataframe of each of the three lists named `epi1` to `epi3`.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-4_cfe3e2c9811008b84f1cd5d80983661b'}\n\n```{.r .cell-code}\nlibrary(epifitter)\nepi1 <- fit_lin(time = pepper$t,  \n                y = pepper$`1` )\nepi1$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nGompertz      0.9848    0.9700 0.5911\nMonomolecular 0.9838    0.9681 0.5432\nLogistic      0.9782    0.9572 0.8236\nExponential   0.7839    0.6447 0.6705\n```\n:::\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-5_130edc2918512262a7f9479e46aff776'}\n\n```{.r .cell-code}\nepi2 <- fit_lin(time = pepper$t,  \n  y = pepper$`2` )\nepi2$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nLogistic      0.9962    0.9924 0.4524\nGompertz      0.9707    0.9431 0.8408\nMonomolecular 0.9248    0.8601 1.0684\nExponential   0.8971    0.8134 1.2016\n```\n:::\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-6_afd991fc50918ff31db34b320e628408'}\n\n```{.r .cell-code}\nepi3 <- fit_lin(time = pepper$t,  \n  y = pepper$`3` )\nepi3$Stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 CCC r_squared    RSE\nLogistic      0.9829    0.9665 0.6045\nGompertz      0.9825    0.9656 0.2263\nExponential   0.9636    0.9297 0.7706\nMonomolecular 0.8592    0.7531 0.2534\n```\n:::\n:::\n\n\nThe statistics of the model fit confirms our initial guess that the predictions by the logistic or the Gompertz are closer to the observations than predictions by the other models. There is a slight between them based on these statistics. However, to pick one of the models, it is important to inspect the curves with the observed and predicted values to check which model is best for all curves. For such, we can use the `plot_fit()` function from *epifitter* to explore visually the fit of the four models to each curve:\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-7_7c8b3b065189d63b628d0bd03406c385'}\n\n```{.r .cell-code}\nplot_fit(epi1)+\n  ylim(0,1)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_fit(epi2)+\n  ylim(0,1)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_fit(epi3)+\n  ylim(0,1)\n```\n\n::: {.cell-output-display}\n![](temporal-fitting_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n:::\n\n\n## Fitting: multiple epidemics\n\nFor multiple epidemics, we can use another handy function that allows us to simultaneously fit the models to multiple DPC data. Different from `fit_lin()`, `fit_multi()` requires the data to be structured in the long format where there is a column specifying each of the epidemics.\n\nLet's then create a new data set called `pepper2` using the data transposing functions of the *tidyr* package.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-8_b7d9cd2e66b54d13140275c846e6485c'}\n\n```{.r .cell-code}\npepper2 <- pepper |> \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\")\n```\n:::\n\n\nNow we fit the models to all DPCs. Note that the name of the variable indicating the DPC code needs to be informed in `strata_cols` argument.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-9_db9aac8850da34207daf3b93e2c0615e'}\n\n```{.r .cell-code}\nepi_all <- fit_multi(\n  time_col = \"t\",\n  intensity_col = \"inc\",\n  data = pepper2,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n```\n:::\n\n\nNow let's select the statistics of model fitting. Again, *Epifitter* ranks the models based on the CCC (the higher the better) but it is important to check the RSE as well - the lower the better. In fact, the RSE is more important when the goal is prediction.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-10_2a1b7adb03c7bbdadc717c703f3c2bce'}\n\n```{.r .cell-code}\nepi_all$Parameters |> \n  select(treat, model, best_model, RSE, CCC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   treat         model best_model       RSE       CCC\n1      1      Gompertz          1 0.5911056 0.9847857\n2      1 Monomolecular          2 0.5431977 0.9838044\n3      1      Logistic          3 0.8235798 0.9781534\n4      1   Exponential          4 0.6705085 0.7839381\n5      2      Logistic          1 0.4523616 0.9961683\n6      2      Gompertz          2 0.8407922 0.9707204\n7      2 Monomolecular          3 1.0683633 0.9247793\n8      2   Exponential          4 1.2015809 0.8971003\n9      3      Logistic          1 0.6045243 0.9829434\n10     3      Gompertz          2 0.2262550 0.9824935\n11     3   Exponential          3 0.7705736 0.9635747\n12     3 Monomolecular          4 0.2533763 0.8591837\n```\n:::\n:::\n\n\nThe code below calculates the frequency that each model was the best. This would facilitate in the case of many epidemics to analyse.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-11_41039830d6fdddf255472a044ac81b53'}\n\n```{.r .cell-code}\nfreq_best <- epi_all$Parameters %>% \n    filter(best_model == 1) %>% \n    group_by(treat, model) %>% \n    summarise(first = n()) %>%\n  ungroup() |> \n  count(model) \nfreq_best \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 2\n  model        n\n  <chr>    <int>\n1 Gompertz     1\n2 Logistic     2\n```\n:::\n:::\n\n\nWe can see that the Logistic model was the best model in two out of three epidemics.\n\nTo be more certain about our decision, let's advance to the final step which is to produce the plots with the observed and predicted values for each assessment time by calling the `Data` dataframe of the \\``epi_all` list.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-fitted_c32cccde66a4a2d9b7129ba9c78e3221'}\n\n```{.r .cell-code}\nepi_all$Data |>\n filter(model %in% c(\"Gompertz\", \"Logistic\")) |> \n  ggplot(aes(time, predicted, shape = treat)) +\n  geom_point(aes(time, y)) +\n  geom_line() +\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(0, 1)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n```\n\n::: {.cell-output-display}\n![Observed (dots) and fitted (line) values for three tobacco etch epidemics in pepper](temporal-fitting_files/figure-html/fig-fitted-1.png){#fig-fitted width=672}\n:::\n:::\n\n\nOverall, the logistic model seems a better fit for all the curves. Let's produce a plot with the prediction error versus time.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-error_1b6f2e39c93917ff9a19893b2bfcdbfd'}\n\n```{.r .cell-code}\nepi_all$Data |>\n filter(model %in% c(\"Gompertz\", \"Logistic\")) |> \n  ggplot(aes(time, predicted -y, shape = treat)) +\n  geom_point() +\n  geom_line() +\n  geom_hline(yintercept = 0, linetype =2)+\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(-0.4, 0.4)) + # set the max to 0.6\n  labs(\n    y = \"Prediction error\",\n    x = \"Time (days after emergence)\",\n    shape = \"Epidemic\"\n  )\n```\n\n::: {.cell-output-display}\n![Prediction error (dotted lines) by two models fitted to the progress curves of three tobacco etch epidemics in pepper](temporal-fitting_files/figure-html/fig-error-1.png){#fig-error width=672}\n:::\n:::\n\n\nThe plots above confirms the logistic model as good fit overall because the errors for all epidemics combined are more scattered around the non-error line.\n\nWe can then now extract the parameters of interest of the chosen model. These data are stored in the `Parameters` data frame of the `epi_all` list. Let's filter the Logistic model and apply a selection of the parameters of interest.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-14_d590096fa84e90c1d2ff266f8b332b6d'}\n\n```{.r .cell-code}\n  epi_all$Parameters |>\n    filter(model == \"Logistic\") |>\n    select(treat, y0, y0_ci_lwr, y0_ci_upr, r, r_ci_lwr, r_ci_upr \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  treat           y0    y0_ci_lwr   y0_ci_upr         r  r_ci_lwr  r_ci_upr\n1     1 0.0935037690 0.0273207272 0.274728744 0.2104047 0.1659824 0.2548270\n2     2 0.0013727579 0.0006723537 0.002800742 0.2784814 0.2540818 0.3028809\n3     3 0.0008132926 0.0003131745 0.002110379 0.1752146 0.1426077 0.2078215\n```\n:::\n:::\n\n\nWe can produce a plot for visual inference on the differences in the parameters.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-params_3d24a0d7f1b9e25af81972982ac66061'}\n\n```{.r .cell-code}\np1 <- epi_all$Parameters |>\n  filter(model == \"Logistic\") |>\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"r\"\n  )\n\np2 <- epi_all$Parameters |>\n  filter(model == \"Logistic\") |>\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"y0\"\n  )\n\nlibrary(patchwork)\np1 | p2\n```\n\n::: {.cell-output-display}\n![Estimated infection rates (left) and initial inoculum (right) by a logistic model fitted to the progress curves of three epidemics of tobacco etch on pepper](temporal-fitting_files/figure-html/fig-params-1.png){#fig-params width=672}\n:::\n:::\n\n\nWe can compare the rate parameter (slopes) from two separate linear regression models using a t-test. This is sometimes referred to as a \"test of parallelism\" in the context of comparing slopes. The t-statistic for comparing two slopes with their respective standard errors can be calculated as:\n\n$t = \\frac{\\beta_1 - \\beta_2}{\\sqrt{SE_{\\beta_1}^2 + SE_{\\beta_2}^2}}$\n\nThis t-statistic follows a t-distribution with ( df = n_1 + n_2 - 4 ) degrees of freedom, where ( n_1 ) and ( n_2 ) are the sample sizes of the two groups. In our case, ( n_1 = n_2 = 8 ), so ( df = 8 + 8 - 4 = 12 ).\n\nHere's how to perform the t-test for comparing curve 1 and 2.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-16_200a30ad790bcd5cd41c1ad0e414f92f'}\n\n```{.r .cell-code}\n# Given slopes and standard errors from curve 1 and 2\nbeta1 <- 0.2104\t\nbeta2 <- 0.2784\t\nSE_beta1 <- 0.01815 \nSE_beta2 <- 0.00997\n\n# Sample sizes for both treatments (n1 and n2)\nn1 <- 8\nn2 <- 8\n\n# Calculate the t-statistic\nt_statistic <- abs(beta1 - beta2) / sqrt(SE_beta1^2 + SE_beta2^2)\n\n# Degrees of freedom\ndf <- n1 + n2 - 4\n\n# Calculate the p-value\np_value <- 2 * (1 - pt(abs(t_statistic), df))\n\n# Print the results\nprint(paste(\"t-statistic:\", round(t_statistic, 4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"t-statistic: 3.2837\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Degrees of freedom:\", df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Degrees of freedom: 12\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"p-value:\", round(p_value, 4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"p-value: 0.0065\"\n```\n:::\n:::\n\n\nThe `pt()` function in R gives the cumulative distribution function of the t-distribution. The `2 * (1 - pt(abs(t_statistic), df))` line calculates the two-tailed p-value. This will tell us if the slopes are significantly different at your chosen alpha level (commonly 0.05).\n\n\n\n## Designed experiments\n\nIn this next section, we will work with disease data collected over time in the same plot unit (also called repeated measures) from a designed experiment for evaluating and comparing treatment effects.\n\nAgain, we will use a dataset of progress curves shown in page 98 [@chapter2017b]. The curves represent the incidence of soybean plants symptomatic for bud blight caused by tobacco streak virus. Four treatments (different planting dates) were evaluated in randomized complete block design with four replicates. There are four assessment in time for each curve. The data was stored as a csv file and will be loaded using `read_csv()` function and stored as dataframe called `budblight`.\n\n### Loading data\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-17_6c896c7f66523add8ea9dd260ae1ba6c'}\n\n```{.r .cell-code}\nbudblight <- read_csv(\"https://raw.githubusercontent.com/emdelponte/epidemiology-R/main/data/bud-blight-soybean.csv\")\n```\n:::\n\n\nLet's have a look at the first six rows of the dataset and check the data type for each column. There is an additional column representing the replicates, called block.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-18_06af85c75ed1e2d87f9afc1574f00d20'}\n\n```{.r .cell-code}\nbudblight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 64 Ã— 4\n   treat  time block     y\n   <chr> <dbl> <dbl> <dbl>\n 1 PD1      30     1  0.1 \n 2 PD1      30     2  0.3 \n 3 PD1      30     3  0.1 \n 4 PD1      30     4  0.1 \n 5 PD1      40     1  0.3 \n 6 PD1      40     2  0.38\n 7 PD1      40     3  0.36\n 8 PD1      40     4  0.37\n 9 PD1      50     1  0.57\n10 PD1      50     2  0.52\n# â„¹ 54 more rows\n```\n:::\n:::\n\n\n### Visualizing the DPCs\n\nLet's have a look at the curves and produce a combo plot figure similar to Fig. 4.17 of the book, but without the line of the predicted values.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud1_1a17259c2e2b5264c56927feb57d8ab5'}\n\n```{.r .cell-code}\np3 <- budblight |>\n  ggplot(aes(\n    time, y,\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 1.5) +\n  ylim(0, 0.6) +\n  theme(legend.position = \"none\")+\n  facet_wrap(~treat, ncol =1)+\n  labs(y = \"Disease incidence\",\n       x = \"Time (days after emergence)\")\n\np4 <- budblight |>\n  ggplot(aes(\n    time, log(1 / (1 - y)),\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 2) +\n  facet_wrap(~treat, ncol = 1) +\n  theme(legend.position = \"none\")+\n  labs(y = \"Transformed incidence\", x = \"Time (days after emergence)\")\n\np3 | p4\n```\n\n::: {.cell-output-display}\n![Disease progress curves for the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud1-1.png){#fig-bud1 width=768}\n:::\n:::\n\n\n### Model fitting\n\nRemember that the first step in model selection is the visual appraisal of the curve data linearized with the model transformation. In the case the curves represent complete epidemics (close to 100%) appraisal of the absolute rate (difference in y between two times) over time is also helpful.\n\nFor the treatments above, it looks like the curves are typical of a monocyclic disease (the case of soybean bud blight), for which the monomolecular is usually a good fit, but other models are also possible as well. For this exercise, we will use both the linear and the nonlinear estimation method.\n\n#### Linear regression\n\nFor convenience, we use the `fit_multi()` to handle multiple epidemics. The function returns a list object where a series of statistics are provided to aid in model selection and parameter estimation. We need to provide the names of columns (arguments): assessment time (`time_col`), disease incidence (`intensity_col`), and treatment (`strata_cols`).\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-20_a44c5d8cbf057e9885d1bf9dbbff6d54'}\n\n```{.r .cell-code}\nlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n```\n:::\n\n\nLet's look at how well the four models fitted the data. Epifitter suggests the best fitted model (1 to 4, where 1 is best) for each treatment. Let's have a look at the statistics of model fitting.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-21_73a767330b9025c1625991a487cc6f9f'}\n\n```{.r .cell-code}\nlin1$Parameters |> \nselect(treat, best_model, model, CCC, RSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   treat best_model         model       CCC        RSE\n1    PD1          1 Monomolecular 0.9348429 0.09805661\n2    PD1          2      Gompertz 0.9040182 0.22226189\n3    PD1          3      Logistic 0.8711178 0.44751963\n4    PD1          4   Exponential 0.8278055 0.36124036\n5    PD2          1 Monomolecular 0.9547434 0.07003116\n6    PD2          2      Gompertz 0.9307192 0.17938711\n7    PD2          3      Logistic 0.9062012 0.38773023\n8    PD2          4   Exponential 0.8796705 0.32676216\n9    PD3          1 Monomolecular 0.9393356 0.06832499\n10   PD3          2      Gompertz 0.9288436 0.17156394\n11   PD3          3      Logistic 0.9085414 0.39051075\n12   PD3          4   Exponential 0.8896173 0.33884790\n13   PD4          1      Gompertz 0.9234736 0.17474422\n14   PD4          2 Monomolecular 0.8945962 0.06486949\n15   PD4          3      Logistic 0.8911344 0.52412586\n16   PD4          4   Exponential 0.8739618 0.49769642\n```\n:::\n:::\n\n\nAnd now we extract values for each parameter estimated from the fit of the monomolecular model.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-22_7b7e2124f2f6bdb34ea4c724227b6b11'}\n\n```{.r .cell-code}\nlin1$Parameters |>\nfilter(model == \"Monomolecular\") |>\nselect(treat, y0, r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  treat         y0          r\n1   PD1 -0.5727700 0.02197351\n2   PD2 -0.5220593 0.01902952\n3   PD3 -0.4491365 0.01590586\n4   PD4 -0.3619898 0.01118047\n```\n:::\n:::\n\n\nNow we visualize the fit of the monomolecular model (using `filter` function - see below) to the data together with the observed data and then reproduce the right plots in Fig. 4.17 from the book.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud2_cbc8757a3e4d113f2c5cbabfd054f0af'}\n\n```{.r .cell-code}\nlin1$Data |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(time, predicted)) +\n  geom_point(aes(time, y)) +\n  geom_line(size = 0.5) +\n  facet_wrap(~treat) +\n  coord_cartesian(ylim = c(0, 0.6)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n```\n\n::: {.cell-output-display}\n![Observed (dot) and fitted values by a monomolecular model (line) to the data on the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud2-1.png){#fig-bud2 width=672}\n:::\n:::\n\n\nNow we can plot the means and respective 95% confidence interval of the apparent infection rate ($r$) and initial inoculum ($y_0$) for visual inference.\n\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud3_a2d8e07bc63b56f5ca575bb23074431f'}\n\n```{.r .cell-code}\np5 <- lin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"Infection rate (r)\"\n  )\n\np6 <- lin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"Initial inoculum (y0)\"\n  )\np5 | p6\n```\n\n::: {.cell-output-display}\n![Estimates of the infection rate (left) and initial inoculum (right) from the fit of a monomolecular model  to the data on the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud3-1.png){#fig-bud3 width=672}\n:::\n:::\n\n\n#### Non-linear regression\n\nTo estimate the parameters using the non-linear approach, we repeat the same arguments in the `fit_multi` function, but include an additional argument `nlin` set to `TRUE`.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-25_3b193bd8a33af7626d550dd576443c61'}\n\n```{.r .cell-code}\nnlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = TRUE\n)\n```\n:::\n\n\nLet's check statistics of model fit.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-26_613a912c46f0baecd4103c5a3ed7490e'}\n\n```{.r .cell-code}\nnlin1$Parameters |>\nselect(treat, model, CCC, RSE, best_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   treat         model       CCC        RSE best_model\n1    PD1 Monomolecular 0.9382991 0.06133704          1\n2    PD1      Gompertz 0.9172407 0.06986307          2\n3    PD1      Logistic 0.8957351 0.07700720          3\n4    PD1   Exponential 0.8544194 0.08799512          4\n5    PD2 Monomolecular 0.9667886 0.04209339          1\n6    PD2      Gompertz 0.9348370 0.05726761          2\n7    PD2      Logistic 0.9077857 0.06657793          3\n8    PD2   Exponential 0.8702365 0.07667322          4\n9    PD3 Monomolecular 0.9570853 0.04269129          1\n10   PD3      Gompertz 0.9261609 0.05443852          2\n11   PD3      Logistic 0.8997106 0.06203037          3\n12   PD3   Exponential 0.8703443 0.06891021          4\n13   PD4 Monomolecular 0.9178226 0.04595409          1\n14   PD4      Gompertz 0.9085579 0.04791331          2\n15   PD4      Logistic 0.8940731 0.05083336          3\n16   PD4   Exponential 0.8842437 0.05267415          4\n```\n:::\n:::\n\n\nAnd now we obtain the two parameters of interest. Note that the values are not the sames as those estimated using linear regression, but they are similar and highly correlated.\n\n\n::: {.cell hash='temporal-fitting_cache/html/unnamed-chunk-27_dea7af6181256873dbe5c2c3f383230a'}\n\n```{.r .cell-code}\nnlin1$Parameters |>\nfilter(model == \"Monomolecular\") |>\nselect(treat, y0, r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  treat         y0          r\n1   PD1 -0.7072562 0.02381573\n2   PD2 -0.6335713 0.02064629\n3   PD3 -0.5048763 0.01674209\n4   PD4 -0.3501234 0.01094368\n```\n:::\n:::\n\n::: {.cell hash='temporal-fitting_cache/html/fig-bud4_f03604323c363e74ababb6529835dd83'}\n\n```{.r .cell-code}\np7 <- nlin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"Infection rate (r)\"\n  )\n\np8 <- nlin1$Parameters |>\n  filter(model == \"Monomolecular\") |>\n  ggplot(aes(treat, y0)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Epidemic\",\n    y = \"Initial inoculum (y0)\"\n  )\n\np7 | p8\n```\n\n::: {.cell-output-display}\n![Estimates of the infection rate (left) and initial inoculum (right) from the fit of a monomolecular model  to the data on the incidence of budblight of soybean in Brazil for four planting dates](temporal-fitting_files/figure-html/fig-bud4-1.png){#fig-bud4 width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}