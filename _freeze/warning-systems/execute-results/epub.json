{
  "hash": "636b2683634108ad91f5aceefb768cb5",
  "result": {
    "markdown": "---\ntitle: \"Warning systems\"\neditor: visual\neditor_options: \n  chunk_output_type: inline\nformat:\n  html:\n    mermaid:\n      theme: forest\nbibliography: references.bib\n---\n\n\n\n## Introduction\n\nOne practical application of plant disease epidemiology is to predict disease occurrences to guide timely management interventions, reducing crop damage and rationalizing pesticide use. Since the early to mid 1900s, warning systems (synonyms: disease forecaster, predictor) have advanced considerably. More comprehensively, these systems have evolved to a Decision Support System (DSS), when they integrate expert input, models, and databases for more nuanced management recommendations, transcending simple prediction to encompass various goals within computerized frameworks. In fact, technological progress in recent decades has boosted the development and automation of DSSs, now widely available in public and private sectors, providing direct, sophisticated guidance to crop advisors and growers (@fig-dss).\n\n![Core elements of a decision support system that provides risk information for plant disease management](imgs/dss.png){#fig-dss fig-align=\"center\"}\n\nIn its core, a DSS targeting risk prediction for plant disease management are based on a disease **model**, or a simplified, often mathematical, representation of a the system (here the pathosystem) used for making predictions or suggesting management decisions based on the risk information they provide. The models range from basic rules (e.g. if-then) and static thresholds to sophisticated simulation models covering entire disease epidemics. Historically, these models collect weather information from on site automatic weather stations, but can be fed with data from remote sensing (e.g. satellite) or data reanalysis sources.\n\n## Risk assessment and decision framework\n\nThere are basically two types of decisions related to plant disease management: tactical and strategical and these can be related to the distinct time frames of information (i.e., historical data, pre-season, growing season, and future seasons). A risk assessment and decision framework, with associated terminology, can be proposed based on such relations (@fig-timeline) and its components are explained next.\n\n![Framework and associated terminology for plant disease risk assessment](imgs/timeline.png){#fig-timeline fig-align=\"center\"}\n\n**Historical** data and prediction refers to those obtained from or simulated for previous years or seasons. This can include past observed weather patterns, observed or simulated disease outbreaks. The goal is to learn about the \"normal\" patterns associated with disease prevalence and severity. In the p**re-season** period, predictions are made before the actual planting or growing season starts. This could be based on early predictions of weather patterns for the season. During the **growing season,** real-time data is used to provide short-term predictions. This is the period when crops are in the fields and are actively monitored. Finally, for **future seasons,** projections (e.g. climate change scenarios) can be made for the subsequent years or decades.\n\n**Strategical** decisions are those with a long-term impact and are typically based on historical data and projections for future seasons. Examples might include choosing where to plant the crops in the next years, which cultivar to plant, and making infrastructure investments. **Tactical** are short-term decisions typically based on real-time data or short-term predictions, especially those relevant to the current growing season. A chief example include the timing of fungicide applications.\n\nAs to risk terminology, **risk analysis** is a comprehensive assessment of potential disease risks, considering both historical data and projections of the future. The goal is to understand and mitigate potential threats to agricultural production. **Risk prediction** can be broken down into a) **outlook:** Broad predictions or estimations about potential risks, often based on pre-season data. Example: effects that El Ni√±o Southern Oscilation (ENSO) may have on disease patterns; b) **forecasting:** short-term predictions, typically for the growing season, such as critical weather events; and c) **warning:** Immediate alerts about imminent risks, like an upcoming risk of plant infection, crucial for tactical decisions.\n\nIn this chapter we will focus on warning systems that make use of disease monitoring or seasonal weather to provide risk information for tactical decisions.\n\n## When is a warning system needed?\n\nThe figure and the box below provide some information on their utility. In the figure, risk analysis is defined as an approach for pathogens/diseases that are not present in a target region and for which modeling can be used for risk estimation if the disease is highly damaging where it occurs. Warning systems can be used if the disease is more erratic but still damaging when occuring. If the epidemics are too frequent and no effective and economic control is available (for example, some nematodes and virus), plant host resistance is the way to go. If there are effective and economic control measures (e.g. fungicide sprays) during the season, farmers should follows scheduled application of treatments.\n\n\n\n```{mermaid}\n%%| label: fig-diagram2\n%%| fig-cap: \"Decision chart for the need of risk analysis, warning systems, schedule treatment or host resistance in disease management\"\n%%| fig-width: 4\nflowchart\n    Start((Start))\n    A{Disease<BR>present?}\n    B{Highly<BR>damaging?}\n    C[Risk Analysis]\n    D{Damaging?}\n    E{Frequent<BR>epidemics?}\n    F[Scheduled treatments]\n    G[Warning System]\n    H{Economic<BR>control?}\n    I[Host Resistance]\n\n    Start --> A\n    A -->|N| B\n    B -->|N| Start\n    D -->|N| Start\n    A -->|Y| D\n    D -->|Y| E\n    E -->|Y| H\n    B -->|Y| C\n    E -->|N| G\n    H -->|N| I\n    H -->|Y| F\n    \n\n```\n\n\n\n::: callout-warning\n## When is a warning system useful?\n\nFor operational and economical use, warning systems must fulfill four criteria to be practical. A more comprehensive discussion on this topic is presented in [@Campbell1990]:\n\n1.  They should target diseases that are prevalent and economically damaging, affecting yield or quality. Merely having severe economic consequences doesn't guarantee a system's practical use or attention from growers and advisors.\n\n2.  The diseases should exhibit variability across seasons in terms of onset, epidemic growth rate, severity, or another aspect, creating uncertainty in decision-making. Diseases with predictable patterns provide minimal information and little management advantage, reducing the relevance of warning systems.\n\n3.  Users should be capable of acting on the system's alerts, necessitating available and effective control measures and sufficient response time to prevent crop damage. Systems are unhelpful if practitioners can't adapt their strategies promptly.\n\n4.  The system must encompass comprehensive knowledge about the disease, synthesizing accurate risk estimates. Understanding the specific interactions between host, pathogen, and environment is crucial for the system's effectiveness and relevance.\n:::\n\n## What types of systems are there?\n\nThese systems vary significantly in structure and design, reflecting the multitude of plant diseases, objectives, available data, control strategies, developer preferences, and operational infrastructures. Usually, warning system are based on weather inputs, but they might leverage other inputs like host, pathogen, and economic factors, catering to the complexities of disease prediction.\n\nDisease warning systems can include static or dynamic disease thresholds, direct detection of inoculum, simple rules of thumb (e.g. if-then) based on weather, infection risk during defined periods (risk models), or complex simulation models that estimate all phases of an epidemic. Let's see some examples of these systems together with a possible implementation in R.\n\n### Disease thresholds\n\nDamaging thresholds, integral to integrated pest management in entomology, can serve as a basic disease warning system. They involve economic injury levels, denoting pest abundance that equates control costs with incurred losses, and economic or action thresholds, indicating when action is necessary to avoid reaching injury levels [@pedigo1986]. These concepts, while straightforward, can be quite complex in practical scenarios.\n\nThough less prevalent than in arthropod management, thresholds guide actions like fungicide application in plant diseases, especially those directly impacting yield through photosynthetic area reduction [@leiminger2012; @nutter1993terms]. However, their application is challenging for rapid, recurrent diseases affecting high-value crops, requiring prompt intervention even at minimal disease levels. With potato late blight, for instance, the first fungicide application may need to be applied by the time disease severity reaches as low as 0.1% of the foliage. Hence, disease monitoring for detection and quantification is vital for this system. In reality, for some rapid spreading and highly damaging diseases one cannot wait to \"see\" the disease to start protecting the crops, for which yield protection is best when applications are made preventatively.\n\nHowever, the concept of **economic damage threshold** (EDT) may be used as a criteria do indicate when to start with fungicide sprays. By definition, EDT is the amount of disease intensity (e.g. severity when dealing with foliar diseases) that corresponds to an economic loss that equates the control cost to combat the disease. A formula for the EDT was proposed by Mumford and Norton [@mumford1984] and further modified by Reis [@reis2002modelo] for use in foliar fungal diseases, as described in Equation 3:\n\n$EDT = \\frac{F_C}{C_P . D_C} . C_e$ ,\n\nwhere EDT is the disease intensity, $F_C$ is the fungicide cost (USD/ha), $C_P$ is the crop selling price (USD/ton), $D_C$ is the damage coefficient (adjusted to potential yield) and $C_e$ is the control efficacy of the fungicide (proportion of disease reduction relative to non-treated). In practice, sprays should be applied prior to reaching the EDT, which gives rise to the ADT (action damage threshold).\n\nIn a study on northern corn leaf blight in Argentina, the following values were used to calculate the EDT [@derossi2022]. Note that the authors adjusted the Dc to potential yield by multiplying by the potential yield value (8.5 ton.ha) in metric tons, since the Dc is normalized to one metric ton. More about Dc in the dedicated chapter on [yield loss](yieldloss-regression-models.html#damage-coefficients). The action damage threshold (ADT) was defined in that study as 20% reduction of the EDT.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-2_d0fdb791f75bc7f32d7f3fc5a2d549f6'}\n\n```{.r .cell-code}\ncalculate_EDT <- function(Fc, Cp, Dc, Ec) {\n  EDT <- (Fc / (Cp * Dc)) * Ce\n  return(EDT)\n}\nFc <- 30      # fixed cost of control is 30 USD/ha.\nCp <- 112     # fixed crop price is 112 USD/ton.\nDc <- 0.1712  # for potential yield of 8.5 t/ha so 8.5 x 0.02015 = 0.1712.\nCe <- 0.70    # control efficacy of fungicide is 70%.\nEDT_value <- calculate_EDT(Fc, Cp, Dc, Ce)\nprint(EDT_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.09521\n```\n:::\n\n```{.r .cell-code}\nADT = EDT_value * 0.80\nADT\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8761682\n```\n:::\n:::\n\n\n\n### Monitoring season-long weather\n\nDisease warning systems frequently predict conditions conducive to infection of the plant by the pathogen, with wetness and temperature being key variables for many foliar diseases [@bourke1970]. BLITECAST, the first computerized system [@krause1975blitecast] (which combined the Wallin and Hyre systems) provided the means of performing necessary calculations accurately and quickly and issuing recommendations to growers, is an example of successful automated warning system [@krause1975]. While initial inoculum is often undetectable, the presence of inoculum of the pathogen is assumed in many weather-based warning systems. Predictions of an outbreak are possible by tracking environmental conditions favorable for disease development.\n\nWeather-based disease warning systems, like FAST (Forecasting *Alternaria solani* on tomatoes) and Wallin [@madden1978; @wallin1962], continuously monitor moisture and temperature for various crop diseases. These systems calculate weather favorability from environmental data, predicting infection and disease severity. They serve to guide growers on optimal spraying schedules, initiating treatments or determining application intervals based on accumulated severity values over time.\n\n#### Wallin model\n\nJ.R. Wallin developed a model in the mid-20th century focusing on forecasting potato late blight, detailed across several publications [@wallin1962]. The model tracks hourly relative humidity and temperature, emphasizing periods with relative humidity of 90% or more. It calculates the number of high-humidity hours and the corresponding average temperature during the wet period. By accumulating 'disease severity values' (DSV) from plant emergence throughout the season, based on humidity and temperature measures, the model predicts the initial onset and subsequent spread of potato late blight. The table below summarizes the way the DSVs are obtained based on combinations of hours of relative humdity \\> 90% and the air temperature within the wet period.\n\n**Table.** Relationship of temperature and relative humidity (RH) periods as used in the Wallin late blight forecasting system to predict disease severity values (0 to 4).\n\n|                           |       |          |       |       |      |\n|---------------------------|-------|----------|-------|-------|------|\n|                           | Daily | severity | value |       |      |\n| Average Temperature Range | 0     | 1        | 2     | 3     | 4    |\n| 7.2 - 11.6 C              | 15    | 16-18    | 19-21 | 22-24 | \\>25 |\n| 11.7 - 15.0 C             | 12    | 13-15    | 16-18 | 19-21 | \\>22 |\n| 15.1 - 26.6 C             | 9     | 10-12    | 13-15 | 16-18 | \\>19 |\n\nLet's calculate DVS in R based on Wallin's system. But first we need to download hourly weather data from NASA Power project using {nasapower} R package for the locality of Vi√ßosa, MG, Brazil during the month of March 2022.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-3_b8e2648e16f63ddcf669fb90146d8da7'}\n\n```{.r .cell-code}\nlibrary(nasapower)\nweather <- get_power(\n      community = \"ag\",\n      lonlat = c(-42.88, -20.7561),\n      pars = c(\"RH2M\", \"T2M\"),\n      dates = c(\"2022-03-02\", \"2022-03-31\"),\n      temporal_api = \"hourly\"\n    )\nhead(weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNASA/POWER CERES/MERRA2 Native Resolution Hourly Data  \n Dates (month/day/year): 03/02/2022 through 03/31/2022  \n Location: Latitude  -20.7561   Longitude -42.88  \n Elevation from MERRA-2: Average for 0.5 x 0.625 degree lat/lon region = 665.27 meters \n The value for missing source data that cannot be computed or is outside of the sources availability range: NA  \n Parameter(s):  \n \n Parameters: \n RH2M     MERRA-2 Relative Humidity at 2 Meters (%) ;\n T2M      MERRA-2 Temperature at 2 Meters (C)  \n \n# A tibble: 6 √ó 8\n    LON   LAT  YEAR    MO    DY    HR  RH2M   T2M\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 -42.9 -20.8  2022     3     1    21  93.6  20.6\n2 -42.9 -20.8  2022     3     1    22  94.4  20.2\n3 -42.9 -20.8  2022     3     1    23  95.4  19.7\n4 -42.9 -20.8  2022     3     2     0  96.3  19.4\n5 -42.9 -20.8  2022     3     2     1  97.2  19.0\n6 -42.9 -20.8  2022     3     2     2  98.1  18.8\n```\n:::\n:::\n\n\n\nWe now need to obtain the wet period (let's call it leaf wetness, or LW) based on hours of relative humidity \\>90% and then the average temperature during the LW period for each day. We can obtain these by grouping the variables by year, month and day and use `mutate()` and `summarise()`.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-4_ba6d77c7b286b7b71e0be9cea0b2c184'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nweather2 <- weather |> \n      group_by(YEAR, MO, DY) |> \n      mutate(LW = case_when(RH2M > 90 ~ 1,\n                            TRUE ~ 0)) |> \n      filter(LW > 0) |>\n      summarise(Air_LWD = mean(T2M, na.rm = TRUE),\n                LWD = n())\n```\n:::\n\n\n\nNow we are ready to calculate the daily DSV based on Wallin's rules on the table and inspect the first 6 rows of the new table called `df_wallin`.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-5_440d04b80bf44b74f402c18cefb76b60'}\n\n```{.r .cell-code}\ndf_wallin <- weather2 |> \n      mutate(\n        DSV = case_when(\n          # Temperature Range: 7.2 - 11.6 C\n          Air_LWD >= 7.2 & Air_LWD <= 11.7 & LWD <= 15 ~ 0,\n          Air_LWD >= 7.2 & Air_LWD <= 11.7 & LWD > 15 & LWD <= 18 ~ 1,\n          Air_LWD >= 7.2 & Air_LWD <= 11.7 & LWD > 18 & LWD <= 21 ~ 2,\n          Air_LWD >= 7.2 & Air_LWD <= 11.7 & LWD > 21 & LWD <= 24 ~ 3,\n          Air_LWD >= 7.2 & Air_LWD <= 11.7 & LWD > 24 ~ 4,\n          \n          # Temperature Range: 11.7 - 15.0 C\n          Air_LWD > 11.7 & Air_LWD <= 15.1 & LWD <= 12 ~ 0,\n          Air_LWD > 11.7 & Air_LWD <= 15.1 & LWD > 12 & LWD <= 15 ~ 1,\n          Air_LWD > 11.7 & Air_LWD <= 15.1 & LWD > 15 & LWD <= 18 ~ 2,\n          Air_LWD > 11.7 & Air_LWD <= 15.1 & LWD > 18 & LWD <= 21 ~ 3,\n          Air_LWD > 11.7 & Air_LWD <= 15.1 & LWD > 21 ~ 4,\n          \n          # Temperature Range: 15.1 - 26.6 C\n          Air_LWD > 15.1 & Air_LWD <= 26.6 & LWD <= 9 ~ 0,\n          Air_LWD > 15.1 & Air_LWD <= 26.6 & LWD > 9 & LWD <= 12 ~ 1,\n          Air_LWD > 15.1 & Air_LWD <= 26.6 & LWD > 12 & LWD <= 15 ~ 2,\n          Air_LWD > 15.1 & Air_LWD <= 26.6 & LWD > 15 & LWD <= 18 ~ 3,\n          Air_LWD > 15.1 & Air_LWD <= 26.6 & LWD > 18 ~ 4,\n          \n          # Default (For temperatures out of the specified ranges or any other scenarios)\n          TRUE ~ 0  # Assigning a default value of 0\n        )\n      )\n    head(df_wallin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n# Groups:   YEAR, MO [1]\n   YEAR    MO    DY Air_LWD   LWD   DSV\n  <dbl> <dbl> <dbl>   <dbl> <int> <dbl>\n1  2022     3     1    20.2     3     0\n2  2022     3     2    19.2    10     1\n3  2022     3     3    19.7    12     1\n4  2022     3     4    19.9    10     1\n5  2022     3     5    19.5     7     0\n6  2022     3     6    19.0     9     0\n```\n:::\n:::\n\n\n\nWe can visualize the daily and cumulative DSV for the monthly period after transforming the date format using `as.Date()` function. The dashed horizontal line in the plot indicates the action threshold of 20 cumulative DSV points, or when a spray should be applied. Please note that in real systems, the DSV is reduced to zero and another DSV counting is initiated after the spray.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-6_ef0f88c1700a83c1d102c94cd5e0a2be'}\n\n```{.r .cell-code}\ndf_wallin2 <- df_wallin |> \n  mutate(DSV2 = cumsum(DSV),\n  date = as.Date(sprintf('%04d-%02d-%02d', YEAR, MO, DY)))\n\ndf_wallin2 |> \n  ggplot(aes(date, DSV))+\n  geom_col(fill = \"darkred\")+\n  geom_line(aes(date, DSV2))+\n  geom_hline(yintercept = 20, linetype = 2)+\n  annotate(geom = \"text\", x = as.Date(\"2022-03-04\"), y = 20.5, label = \"Action threshold\")+\n  r4pde::theme_r4pde()+\n  labs(x = \"Date\", y = \"Daily and cumulative DSV\")\n```\n\n::: {.cell-output-display}\n![](warning-systems_files/figure-epub/unnamed-chunk-6-1.png)\n:::\n:::\n\n\n\n#### FAST model\n\nHere is a code to calculate daily DSV values based on the FAST table [@madden1978] that relates the hours of relative humidity \\> 90% (wet period) and temperature during the wet period during a 24-hour period.\n\n| Mean temp (¬∞C) | 0   | 1    | 2     | 3     | 4   |\n|----------------|-----|------|-------|-------|-----|\n| 13-17          | 0-6 | 7-15 | 16-20 | 21+   | 23+ |\n| 18-20          | 0-3 | 4-8  | 9-15  | 16-22 | 23+ |\n| 21-25          | 0-2 | 3-5  | 6-12  | 13-20 | 21+ |\n| 26-29          | 0-3 | 4-8  | 9-15  | 16-22 | 23+ |\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-7_d8a87c62e958f31f855bce154e194dd2'}\n\n```{.r .cell-code}\n df_fast <- weather2 %>% \n      mutate(\n        DSV = case_when(\n          # Temperature Range: 13 <= T < 18\n          Air_LWD >= 13 & Air_LWD < 18 & LWD >= 0 & LWD <= 6 ~ 0,\n          Air_LWD >= 13 & Air_LWD < 18 & LWD >= 7 & LWD <= 15 ~ 1,\n          Air_LWD >= 13 & Air_LWD < 18 & LWD >= 16 & LWD <= 20 ~ 2,\n          Air_LWD >= 13 & Air_LWD < 18 & LWD > 20 ~ 3,\n          \n          # Temperature Range: 18 <= T < 21\n          Air_LWD >= 18 & Air_LWD < 21 & LWD >= 0 & LWD <= 3 ~ 0,\n          Air_LWD >= 18 & Air_LWD < 21 & LWD >= 4 & LWD <= 8 ~ 1,\n          Air_LWD >= 18 & Air_LWD < 21 & LWD >= 9 & LWD <= 15 ~ 2,\n          Air_LWD >= 18 & Air_LWD < 21 & LWD >= 16 & LWD <= 22 ~ 3,\n          Air_LWD >= 18 & Air_LWD < 21 & LWD > 22 ~ 4,\n          \n          # Temperature Range: 21 <= T < 26\n          Air_LWD >= 21 & Air_LWD < 26 & LWD >= 0 & LWD <= 2 ~ 0,\n          Air_LWD >= 21 & Air_LWD < 26 & LWD >= 3 & LWD <= 5 ~ 1,\n          Air_LWD >= 21 & Air_LWD < 26 & LWD >= 6 & LWD <= 12 ~ 2,\n          Air_LWD >= 21 & Air_LWD < 26 & LWD >= 13 & LWD <= 20 ~ 3,\n          Air_LWD >= 21 & Air_LWD < 26 & LWD > 20 ~ 4,\n          \n          # Temperature Range: 26 <= T < 30\n          Air_LWD >= 26 & Air_LWD < 30 & LWD >= 0 & LWD <= 3 ~ 0,\n          Air_LWD >= 26 & Air_LWD < 30 & LWD >= 4 & LWD <= 8 ~ 1,\n          Air_LWD >= 26 & Air_LWD < 30 & LWD >= 9 & LWD <= 15 ~ 2,\n          Air_LWD >= 26 & Air_LWD < 30 & LWD >= 16 & LWD <= 22 ~ 3,\n          Air_LWD >= 26 & Air_LWD < 30 & LWD > 22 ~ 4,\n          \n          # Default (For temperatures out of the specified ranges or any other scenarios)\n          TRUE ~ 0  # Assigning a default value of 0\n        )\n      )\ndf_fast\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 √ó 6\n# Groups:   YEAR, MO [1]\n    YEAR    MO    DY Air_LWD   LWD   DSV\n   <dbl> <dbl> <dbl>   <dbl> <int> <dbl>\n 1  2022     3     1    20.2     3     0\n 2  2022     3     2    19.2    10     2\n 3  2022     3     3    19.7    12     2\n 4  2022     3     4    19.9    10     2\n 5  2022     3     5    19.5     7     1\n 6  2022     3     6    19.0     9     2\n 7  2022     3     7    18.4     7     1\n 8  2022     3     8    19.2    10     2\n 9  2022     3     9    19.6    12     2\n10  2022     3    10    19.6    13     2\n# ‚Ñπ 21 more rows\n```\n:::\n\n```{.r .cell-code}\ndf_fast2 <- df_fast |> \n  mutate(DSV2 = cumsum(DSV),\n  date = as.Date(sprintf('%04d-%02d-%02d', YEAR, MO, DY)))\n\ndf_fast2 |> \n  ggplot(aes(date, DSV))+\n  geom_col(fill = \"darkred\")+\n  geom_line(aes(date, DSV2))+\n  geom_hline(yintercept = 20, linetype = 2)+\n  annotate(geom = \"text\", x = as.Date(\"2022-03-04\"), y = 21.5, label = \"Action threshold\")+\n  r4pde::theme_r4pde()+\n  labs(x = \"Date\", y = \"Daily and cumulative DSV\")\n```\n\n::: {.cell-output-display}\n![](warning-systems_files/figure-epub/unnamed-chunk-7-1.png)\n:::\n:::\n\n\n\n#### Bonus: interactive app\n\nFor educational purposes, an interactive app was developed using R Shiny. This [app](https://epidemiologiaufv.shinyapps.io/warning-systems/) demonstrates the application of the Wallin (forecast for late blight of potato) and FAST (Forecast for *Alternaria solani* on Tomatoes) rules for calculating DSV, determining the appropriate timing for fungicide sprays (based on a defined threshold), and counting the total sprays during a selected period (@fig-ws_systems).\n\nTo utilize the system, users should select the model, input the latitude and longitude (or choose a location from the map), and specify the time period for the simulation, such as from plant emergence to harvest. The weather data for this simulation is sourced from the NASA Power project via the {nasapower} R package.\n\n[![Screenshot of a web-based warning system for plant diseases based on Wallin\\'s and FAST rules](imgs/ws_systems.png){#fig-ws_systems fig-align=\"center\"}](https://epidemiologiaufv.shinyapps.io/warning-systems/)\n\n### Infection risk during defined periods\n\nMany diseases like late blight of potatoes and early blight of tomatoes (but also others such as apple scab), as seen in the previous section, require continuous (season long) risk assessment. However, some warning systems assess risk at only one time point, such as those crops that are most vulnerable to diseases during specific growth phases. In these cases, a single disease warning is issued, such as the risk of disease occurrence at a intensity above a threshold (e.g. incidence \\> 30%).\n\nThese systems use statistical models (risk algorithms) to predict probabilities of an event, usually for a binary response, based on weather variables that occur over specific periods of time, usually when infections take place. For example, Fusarium head blight (FHB, caused by *Fusarium graminearum*) infection depends on weather events that occur around the flowering stage, when the crop is most vulnerable. This is also the case of *Sclerotinia* (white mold) diseases that affect flowers and the presence/absence of apothecia is key for risk assessment[@willbur2018]. Such events of binary nature can be predicted using algorithms that consider weather variables, cultivar susceptibility, soil moisture, etc. A commonly used algorithm is the logistic regression model which deals with binary classification.\n\n#### Logistic regression: Ohio FHB models\n\nFHB risk models were developed in the United States in the early 2000s to predict the risk of an epidemic, or when disease severity in the field was greater than 10% [@dewolf2003]. In the paper, the epidemic cases were classified as 0 and 1, according to that threshold, and several logistic regression models were fitted to the data using a summary of weather-related variables from two defined periods: seven days prior to flowering date and 10 days following flowering date (50% of wheat heads with anthers).\n\nAmong several models, the authors found that a single variable model (model A) exhibited a good accuracy (0.83). The variable selected was a combination of temperature and humidity for the 10-day period after flowering. Named TRH9010, it corresponds to the total hours, within the 10-day period, when the temperature (T) was \\>=15 and \\<= 30 ^o^C and relative humidity (RH) was \\>90%.\n\nLet's implement this model in R and calculate the probability of infection. Again, we need to download hourly data from NASA Power project for a period of three years. Let's work with data from Wooster, OH, United States.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-8_f1fe54c2190187378fa062d9ec8e80f0'}\n\n```{.r .cell-code}\nlibrary(nasapower)\nweather <- get_power(\n      community = \"ag\",\n      lonlat = c(-81.9399, 40.7982),\n      pars = c(\"RH2M\", \"T2M\", \"PRECTOTCORR\"),\n      dates = c(\"2020-01-01\", \"2022-12-31\"),\n      temporal_api = \"hourly\"\n    )\nhead(weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNASA/POWER CERES/MERRA2 Native Resolution Hourly Data  \n Dates (month/day/year): 01/01/2020 through 12/31/2022  \n Location: Latitude  40.7982   Longitude -81.9399  \n Elevation from MERRA-2: Average for 0.5 x 0.625 degree lat/lon region = 309.08 meters \n The value for missing source data that cannot be computed or is outside of the sources availability range: NA  \n Parameter(s):  \n \n Parameters: \n RH2M            MERRA-2 Relative Humidity at 2 Meters (%) ;\n T2M             MERRA-2 Temperature at 2 Meters (C) ;\n PRECTOTCORR     MERRA-2 Precipitation Corrected (mm/hour)  \n \n# A tibble: 6 √ó 9\n    LON   LAT  YEAR    MO    DY    HR  RH2M   T2M PRECTOTCORR\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>\n1 -81.9  40.8  2019    12    31    19  79.6 -2.75        0.02\n2 -81.9  40.8  2019    12    31    20  80.8 -2.99        0.02\n3 -81.9  40.8  2019    12    31    21  82.8 -3.17        0.02\n4 -81.9  40.8  2019    12    31    22  83.9 -3.27        0.01\n5 -81.9  40.8  2019    12    31    23  85   -3.37        0.01\n6 -81.9  40.8  2020     1     1     0  86.4 -3.55        0.01\n```\n:::\n:::\n\n\n\nWe can then create a function named `calculate_TRH9010()`. This function calculates the number of hours that meet the specified condition (i.e., hours when 15 \\<= T \\<= 30 & RH \\> 90), the probability (p) of infection, and the classification of the epidemic (epi) as 0 or 1 based on a defined threshold for p (0.36 in this case) [@dewolf2003]. The function's arguments are the weather data frame, YEAR, MO, and DY, allowing us to estimate the risk for a specific day (the flowering date) within the downloaded period. It's important to note that, in the original model, the variables were normalized (its value divided by the maximum observed value). Thus, the hour count for TRH9010 should be divided by the constant 136.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-9_637fd232422be83f6ba968bba4c1d0e4'}\n\n```{.r .cell-code}\ncalculate_TRH9010 <- function(data, YEAR, MO, DY){\n  start_row <- which(data$YEAR == YEAR & data$MO == MO & data$DY == DY & data$HR == 0)[1] \n  if ((nrow(data) - start_row) < 9 * 24){ \n    return(list(TRH9010 = NA, y = NA, p = NA, epi = NA))\n  }\n  subset_data <- data[start_row:(start_row + 9 * 24 - 1),] \n  condition_met <- with(subset_data, T2M >= 15 & T2M <= 30 & RH2M > 90)\n  total_hours <- sum(condition_met)\n  y <- -3.3756 + 6.8128 * (total_hours / 136) # divide by maximum of 136 as in the paper\n  p <- exp(y) / (1 + exp(y))\n  epi <- ifelse(p > 0.36, 1, 0)\n  return(list(TRH9010 = total_hours, p = p, epi = epi))\n}\n```\n:::\n\n\n\nNow we apply the function for the 1st of June 2021. The output is the hour count, the probability and the epidemic classification.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-10_c241fd2ff18bf1c56aab5b3417720848'}\n\n```{.r .cell-code}\nresults <- calculate_TRH9010(weather, YEAR = 2021, MO = 6, DY = 1)\nresults\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$TRH9010\n[1] 62\n\n$p\n[1] 0.4329649\n\n$epi\n[1] 1\n```\n:::\n:::\n\n\n\nWe may want to apply the function for a series of days within a given month so that we can generate a series of probabilities. Let's write code to simulate 30 days in June using a `for()` loop which will store the results in a list, but we can further transform to a dataframe using `map_dfr()` function.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-11_5217b14d73926d87979074d7ebb32fed'}\n\n```{.r .cell-code}\nnum_days <- 30  \nall_results <- list()\nfor(day in 1:num_days){\n  all_results[[paste0(\"\", day)]] <- calculate_TRH9010(weather, YEAR = 2021, MO = 6, DY = day)\n}\n\n# transform results to a dataframe\ndf <- all_results %>%\n  map_dfr(~ as.data.frame(t(.)), .id = \"day\")\n\n# Change variables  to numeric \ndf$p <- as.numeric(df$p)\ndf$day <- as.numeric(df$day)\ndf$epi <- as.numeric(df$epi)\n```\n:::\n\n\n\nFinally we plot the results.\n\n\n\n::: {.cell hash='warning-systems_cache/epub/unnamed-chunk-12_11b722cbca5534527c1ff5ce585fa8de'}\n\n```{.r .cell-code}\nggplot(df, aes(day, p, fill = factor(epi))) + \n  geom_col()+\n  scale_x_continuous(n.breaks = 30)+\n  scale_fill_manual(values = c(\"grey60\", \"darkred\"))+\n  geom_hline(yintercept = 0.36, linetype = 2)+\n  r4pde::theme_r4pde(font_size = 12)+\n  ylim(0,1)+\n  theme(legend.position = \"bottom\")+\n  labs(x = \"Wheat flowering day in june 2021\", y = \"Risk probability\",\n       fill = \"Epidemic classification\",\n       title = \"Infection risk by Ohio (TRH9010) FHB model\",\n       subtitle = \"Location: Wooster, Ohio\",\n       caption = \"Model source: De Wolf et al. (2002)\")\n```\n\n::: {.cell-output-display}\n![](warning-systems_files/figure-epub/unnamed-chunk-12-1.png)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}